This is the text file I use to review all materials I have learned from "Python and Django Full Stack Web Developer BootCamp"
course.
This course is 32-hour long, but it has been 1.5 month and I have just finished 60% of the course.
Personally, it is useful to learn Django and Python, but online learning is so boring. I feel sleepy all the time because I
have no interaction with the course. I tried my best to stick to the course and followed it as much as I can every day.

"Python and Django Full Stack Web Developer BootCamp" by Jose Partilla

***Front-end***
This part is not that hard. I just learn to know some basic concepts about html, css, and javascript. It is not the main part of this course. However, it took me a month to finish. I was too lazy. Any idea to make myself less lazy???

--HTML--
There is not much in HTML section. Basically, with Atom text editor, I just need to type html then Enter, the whole outline of html file will be filled up.
Some basic tags: <h1>, <a> (this one for links), <p>, <ol>, <ul>
We can also put images here (Google for more information) 
One of the most important elements in html is form (maybe because django ultilizes it alot)
Depends on what type of input, it will show different things (dots for password or submit buttons for submission)

--CSS--
I personally don't like this part. It is something to do with visual parts of the site like colors, shapes, borders... The basic syntax is type of tag then {whatever you want it to be in here} 
Use # . for specific id and class in html. There is also more syntax, read the document for more information.
About the fonts, we can refer it online.
We can read about this on google if we need, so I don't really want to learn by heart everything in this section. I just know basic concepts.


--Bootstrap--
This thing makes my life easier because I don't need to think much about css. However, things on here are premade, which means if we want to make the site looks exactly what we want, we have to deal with css ourselves. But I am so lazy, using this thing is good enough. As usual, I don't want to learn by heart everything. I just need to know where I can find the information about this bootstrap. Therefore, google about bootstrap then go to their site and find the documentation. No need to download bootstrap I think because we have internet and just need to refer the link.

--Javascript--
A new language to me.
I don't work with this much so I can't remember any syntax. However, it looks like python. It is a new language, but the concepts are the same with java or python. So I will just look for documentaion online if I need.

--DOM--
Document Object Model
I get what I watched. However, I can't say I totally understand it. It is like grab specific things on frontend and change it.
It treats html file like a tree and traverse through it. So when we want to change the contents or whatever features of that part of html, we can use DOM and change it.
I think this part like GUI and EventHandler

--jQuerry--
I skipped this part because I don't like it (I hate myself). They say this jQuerry makes things easier because the syntax is shorter than Javascript when using DOM. But but but, syntax is easier, but more syntax to learn @@ Please,we need to consider the pros and cons (time vs memory)


***Back-end***
This is the main part of the course. I guess later in life if I work in the CS field, I will work with back-end of softwares or things to do with data, algorithms. I don't like the front-end that much.

At this point, I will not go through django part by part like in the tutorial. Therefore, I will list out the steps to create an application using django.

First, set up a virtual environment by using conda. I don't remember the syntax now, but I can easily get it from the documentation. Basically, the virtual environment will make sure the application run with desired packages. For example, in my environment, I can update python from 2 to 3, or have different versions of django which will make error if I use the syntax of the old versions of those packages. Therefore, I need to create an environment containing desired packages to make sure my application running without any conflicts.

--Step 1--: Setup Virtual Environment
Cmd:
conda activate myEnv (myEnv is the name of my virtual environment)

--Step 2--: Create project, apps, and necessary files
Then go to the directory we want to create the project:
django-admin startproject MySite

After this step, we already create a project, now cd into that project folder:
django-admin startapp blog 

*Comment: We create an app inside the project. The special thing about app in django is that they can be re-used many times in many different projects.

After you add a new app, go to settings.py and add the name of the app to installed app list.

Inside the app folder, I will add two more python files which are forms.py and urls.py (I will need forms in my application, and urls to views)

Then I run:
python manage.py migrate (I get it as to establish connection between django and database? or/and confirm the changes we made to the app)
python manage.py makemigrations blog (this is to update/create new models in database)
Then run the server:
python manage.py runserver

Copy and paste the url into browser, we can see the django default page.

***Even though the tutorial told me to add static folder and templates later, but I want to set every up at the beginning, so I will put them here
-Create static folder inside the app (so later when we use the app in other project, everything goes with this app will move their)
-Inside static create css folder and js folder
-In settings.py, add STATIC_ROOT = os.path.join(BASE_DIR,'static')
-Create templates folder inside the app, then inside templates create blog and registration(blog contains views in the blog app, registration contains login,logout whatever views)
-Set TEMPLATE_DIR in settings.py, then put TEMPLATE_DIR in the list DIRS in TEMPLATES
-Add this thing LOGIN_REDIRECT_URL = '/' (after login, bring user to index view)

--Step 3--: Setting up models (which are elements we work with in our application)
Model should be created first I believe (not all the case) because other things like forms, modelforms views will use it alot

In models.py:
from django.utils import timezone
from django.urls import reverse

Models here are created as classes extended from models.Model object


class Post(models.Model):
	author = models.ForeignKey('auth.User')
	title = models.CharField(max_length=200)
	text = models.TextField()
	create_date = models.DateTimeField(default=timezone.now())
	published_date = models.DateTimeField(blank=True, null = True)
	//Can be left as blank or null

	def publish(self): //this method is to publish the post
		self.published_date = timezone.now()
		self.save() //save this new publish to models in db

	def approve_comments(self):
		return self.comments.filter(approved_comment=True)//return a list of approved comments
	
	def get_absolute_url(self):
        	return reverse('post_detail',kwargs={'pk':self.pk})  
//after create the post instance, bring me to post_detail view with the context

	def __str__(self):
		return self.title

class Comments(models.Model):
	post = models.ForeignKey('blog.Post',related_name='comments')	
	//related_name: used in case we want to get all comments in the Post like Post.comments.all()
	author = models.CharField(max_length=200)
    	text = models.TextField()
    	create_date = models.DateTimeField(default = timezone.now())
	approved_comment = models.BooleanField(default=False)

   	def approve_comments(self):
       		self.approved_comment = True
        	self.save()	

	def get_absolute_url(self):
        	return reverse('post_list')	

    	def __str__(self):
        	return self.text


The get_absolute_url is used when we want the site go to that url after the object is created

--Step 4--: Setting up Forms based on the models we created in previous step
In forms.py:
from django import forms
from blog.models import Post, Comment

class PostForm(forms.ModelForm):
//Usually, we use modelform because we want what we enter in the form will be transferred into model

	class Meta():
		model = Post //the model we want to connect form to
		fields = ('author','title','text') //fields of model we want to manipulate
	
		widgets={
            	'title':forms.TextInput(attrs={'class':'textinputclass'}),
           	 'text':forms.TextArea(attrs={'class':'editble medium-editor-textarea postcontent'})
        	}//this dictionary is something to do with css and js files 

class CommentForm(forms.ModelForm):
    	class Meta():
        	model = Comment
       		fields = ('author','text')
		widgets={
            	'title':forms.TextInput(attrs={'class':'textinputclass'}),
           	 'text':forms.TextArea(attrs={'class':'editble medium-editor-textarea'})
        	}//this dictionary is something to do with css and js files

--Step 5--: Set up URLS, Views, Templates for the site
In templates/blog, create base.html for later use
Create about.html, use {% extends 'blog/base.html'%}
In views.py:
from django.views.generic import TemplateView (our views can be extended from this class to make things eaiser)

class AboutView(TemplateView):
	template_name = 'about.html'

in MySite/urls.py, set the path for anything not admin to the urls.py file in blog path('', include('blog.urls')

in blog/urls.py, it should somehow look the same as the urls.py in MySite, but different urls:
from django.urls import path
from blog import views

urlpatterns = [
    path('about/',views.AboutView.as_view(), name='about')
]

So, basically, we do everything like this again and again: create html file, create view then set url for that view or create view, create html file, then set url

In views.py, import ListView and DetailView from generic (these two were told to be very common in reality...not sure)

In the PostListView class, we want to list all the post out, so we need to set the model of the view which is Post, then we need to import Post from models


add this thing in PostListView:
def get_queryset(self):
        return Post.objects.filter(publish_date__lte=timezone.now()).order_by('-published_date')

it is like a sql but in python, get all the object of Post, with condition less than or equal(lte) to show in the list view

Create a PostDetailView for Post:
class PostDetailView(DetailView):
    model = Post

Set Urls for this detail view. The url depends on which post we choose, so it will change according to the primary key. Thus, in urls.py we add
path('post/<int:pk>',views.PostDetailView.as_view(),name='post_detail')

Create CreatePostView which extended from CreateView (import like ListView and DetailView)
from django.contrib.auth.mixins import LoginRequiredMixin
//We use this instead of login_required from decorators because we use class based view
//This basically redirect users to login page if they are not logged in
class CreatePostView(LoginRequiredMixin, CreateView)://require logged in to create post
    login_url = '/login/' (provide login url)
    redirect_field_name = 'blog/post_detail.html' (redirect to html page when finish creating)
    form_class = PostForm (connect to the Form)
    model = Post

Create UpdateView, DeleteView the same as CreateView and DraftListView the same as PostListView but with different queryset condition


